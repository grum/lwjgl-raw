/* MACHINE GENERATED FILE, DO NOT EDIT */

package org.lwjgl.opengl;

import org.lwjgl.LWJGLException;
import java.util.Set;

public class ContextCapabilities {
	public final boolean GL_ARB_color_buffer_float;
	public final boolean GL_ARB_depth_texture;
	public final boolean GL_ARB_draw_buffers;
	public final boolean GL_ARB_fragment_program;
	public final boolean GL_ARB_fragment_program_shadow;
	public final boolean GL_ARB_fragment_shader;
	public final boolean GL_ARB_half_float_pixel;
	public final boolean GL_ARB_imaging;
	public final boolean GL_ARB_matrix_palette;
	public final boolean GL_ARB_multisample;
	public final boolean GL_ARB_multitexture;
	public final boolean GL_ARB_occlusion_query;
	public final boolean GL_ARB_pixel_buffer_object;
	public final boolean GL_ARB_point_parameters;
	public final boolean GL_ARB_point_sprite;
	public final boolean GL_ARB_shader_objects;
	public final boolean GL_ARB_shading_language_100;
	public final boolean GL_ARB_shadow;
	public final boolean GL_ARB_shadow_ambient;
	public final boolean GL_ARB_texture_border_clamp;
	public final boolean GL_ARB_texture_compression;
	public final boolean GL_ARB_texture_cube_map;
	public final boolean GL_ARB_texture_env_add;
	public final boolean GL_ARB_texture_env_combine;
	public final boolean GL_ARB_texture_env_crossbar;
	public final boolean GL_ARB_texture_env_dot3;
	public final boolean GL_ARB_texture_float;
	public final boolean GL_ARB_texture_mirrored_repeat;
	public final boolean GL_ARB_texture_non_power_of_two;
	public final boolean GL_ARB_texture_rectangle;
	public final boolean GL_ARB_transpose_matrix;
	public final boolean GL_ARB_vertex_blend;
	public final boolean GL_ARB_vertex_buffer_object;
	public final boolean GL_ARB_vertex_program;
	public final boolean GL_ARB_vertex_shader;
	public final boolean GL_ARB_window_pos;
	public final boolean GL_ATI_draw_buffers;
	public final boolean GL_ATI_element_array;
	public final boolean GL_ATI_envmap_bumpmap;
	public final boolean GL_ATI_fragment_shader;
	public final boolean GL_ATI_map_object_buffer;
	public final boolean GL_ATI_pn_triangles;
	public final boolean GL_ATI_separate_stencil;
	public final boolean GL_ATI_texture_compression_3dc;
	public final boolean GL_ATI_texture_float;
	public final boolean GL_ATI_texture_mirror_once;
	public final boolean GL_ATI_vertex_array_object;
	public final boolean GL_ATI_vertex_attrib_array_object;
	public final boolean GL_ATI_vertex_streams;
	public final boolean GL_EXT_abgr;
	public final boolean GL_EXT_bgra;
	public final boolean GL_EXT_blend_equation_separate;
	public final boolean GL_EXT_blend_func_separate;
	public final boolean GL_EXT_blend_subtract;
	public final boolean GL_EXT_cg_shader;
	public final boolean GL_EXT_compiled_vertex_array;
	public final boolean GL_EXT_depth_bounds_test;
	public final boolean GL_EXT_draw_range_elements;
	public final boolean GL_EXT_fog_coord;
	public final boolean GL_EXT_framebuffer_object;
	public final boolean GL_EXT_multi_draw_arrays;
	public final boolean GL_EXT_packed_pixels;
	public final boolean GL_EXT_paletted_texture;
	public final boolean GL_EXT_pixel_buffer_object;
	public final boolean GL_EXT_point_parameters;
	public final boolean GL_EXT_rescale_normal;
	public final boolean GL_EXT_secondary_color;
	public final boolean GL_EXT_separate_specular_color;
	public final boolean GL_EXT_shadow_funcs;
	public final boolean GL_EXT_shared_texture_palette;
	public final boolean GL_EXT_stencil_two_side;
	public final boolean GL_EXT_stencil_wrap;
	public final boolean GL_EXT_texture_3d;
	public final boolean GL_EXT_texture_compression_s3tc;
	public final boolean GL_EXT_texture_env_combine;
	public final boolean GL_EXT_texture_env_dot3;
	public final boolean GL_EXT_texture_filter_anisotropic;
	public final boolean GL_EXT_texture_lod_bias;
	public final boolean GL_EXT_texture_mirror_clamp;
	public final boolean GL_EXT_texture_rectangle;
	public final boolean GL_EXT_vertex_shader;
	public final boolean GL_EXT_vertex_weighting;
	public final boolean OpenGL11;
	public final boolean OpenGL12;
	public final boolean OpenGL13;
	public final boolean OpenGL14;
	public final boolean OpenGL15;
	public final boolean OpenGL20;
	public final boolean GL_HP_occlusion_test;
	public final boolean GL_IBM_rasterpos_clip;
	public final boolean GL_NV_blend_square;
	public final boolean GL_NV_copy_depth_to_color;
	public final boolean GL_NV_depth_clamp;
	public final boolean GL_NV_evaluators;
	public final boolean GL_NV_fence;
	public final boolean GL_NV_float_buffer;
	public final boolean GL_NV_fog_distance;
	public final boolean GL_NV_fragment_program;
	public final boolean GL_NV_fragment_program2;
	public final boolean GL_NV_fragment_program_option;
	public final boolean GL_NV_half_float;
	public final boolean GL_NV_light_max_exponent;
	public final boolean GL_NV_multisample_filter_hint;
	public final boolean GL_NV_occlusion_query;
	public final boolean GL_NV_packed_depth_stencil;
	public final boolean GL_NV_pixel_data_range;
	public final boolean GL_NV_point_sprite;
	public final boolean GL_NV_primitive_restart;
	public final boolean GL_NV_register_combiners;
	public final boolean GL_NV_register_combiners2;
	public final boolean GL_NV_texgen_reflection;
	public final boolean GL_NV_texture_compression_vtc;
	public final boolean GL_NV_texture_env_combine4;
	public final boolean GL_NV_texture_expand_normal;
	public final boolean GL_NV_texture_rectangle;
	public final boolean GL_NV_texture_shader;
	public final boolean GL_NV_texture_shader2;
	public final boolean GL_NV_texture_shader3;
	public final boolean GL_NV_vertex_array_range;
	public final boolean GL_NV_vertex_array_range2;
	public final boolean GL_NV_vertex_program;
	public final boolean GL_NV_vertex_program1_1;
	public final boolean GL_NV_vertex_program2;
	public final boolean GL_NV_vertex_program2_option;
	public final boolean GL_NV_vertex_program3;
	public final boolean GL_SUN_slice_accum;

	static Set initAllStubs() throws LWJGLException {
		org.lwjgl.opengl.GL11.initNativeStubs();
		Set supported_extensions = GLContext.getSupportedExtensions();
		supported_extensions.add("GL_ARB_buffer_object");
		supported_extensions.add("GL_ARB_program");
		supported_extensions.add("GL_NV_program");
		GLContext.initNativeStubs(ARBBufferObject.class, supported_extensions, "GL_ARB_buffer_object");
		GLContext.initNativeStubs(ARBColorBufferFloat.class, supported_extensions, "GL_ARB_color_buffer_float");
		GLContext.initNativeStubs(ARBDrawBuffers.class, supported_extensions, "GL_ARB_draw_buffers");
		GLContext.initNativeStubs(ARBImaging.class, supported_extensions, "GL_ARB_imaging");
		GLContext.initNativeStubs(ARBMatrixPalette.class, supported_extensions, "GL_ARB_matrix_palette");
		GLContext.initNativeStubs(ARBMultisample.class, supported_extensions, "GL_ARB_multisample");
		GLContext.initNativeStubs(ARBMultitexture.class, supported_extensions, "GL_ARB_multitexture");
		GLContext.initNativeStubs(ARBOcclusionQuery.class, supported_extensions, "GL_ARB_occlusion_query");
		GLContext.initNativeStubs(ARBPointParameters.class, supported_extensions, "GL_ARB_point_parameters");
		GLContext.initNativeStubs(ARBProgram.class, supported_extensions, "GL_ARB_program");
		GLContext.initNativeStubs(ARBShaderObjects.class, supported_extensions, "GL_ARB_shader_objects");
		GLContext.initNativeStubs(ARBTextureCompression.class, supported_extensions, "GL_ARB_texture_compression");
		GLContext.initNativeStubs(ARBTransposeMatrix.class, supported_extensions, "GL_ARB_transpose_matrix");
		GLContext.initNativeStubs(ARBVertexBlend.class, supported_extensions, "GL_ARB_vertex_blend");
		GLContext.initNativeStubs(ARBVertexProgram.class, supported_extensions, "GL_ARB_vertex_program");
		GLContext.initNativeStubs(ARBVertexShader.class, supported_extensions, "GL_ARB_vertex_shader");
		GLContext.initNativeStubs(ARBWindowPos.class, supported_extensions, "GL_ARB_window_pos");
		GLContext.initNativeStubs(ATIDrawBuffers.class, supported_extensions, "GL_ATI_draw_buffers");
		GLContext.initNativeStubs(ATIElementArray.class, supported_extensions, "GL_ATI_element_array");
		GLContext.initNativeStubs(ATIEnvmapBumpmap.class, supported_extensions, "GL_ATI_envmap_bumpmap");
		GLContext.initNativeStubs(ATIFragmentShader.class, supported_extensions, "GL_ATI_fragment_shader");
		GLContext.initNativeStubs(ATIMapObjectBuffer.class, supported_extensions, "GL_ATI_map_object_buffer");
		GLContext.initNativeStubs(ATIPnTriangles.class, supported_extensions, "GL_ATI_pn_triangles");
		GLContext.initNativeStubs(ATISeparateStencil.class, supported_extensions, "GL_ATI_separate_stencil");
		GLContext.initNativeStubs(ATIVertexArrayObject.class, supported_extensions, "GL_ATI_vertex_array_object");
		GLContext.initNativeStubs(ATIVertexAttribArrayObject.class, supported_extensions, "GL_ATI_vertex_attrib_array_object");
		GLContext.initNativeStubs(ATIVertexStreams.class, supported_extensions, "GL_ATI_vertex_streams");
		GLContext.initNativeStubs(EXTBlendEquationSeparate.class, supported_extensions, "GL_EXT_blend_equation_separate");
		GLContext.initNativeStubs(EXTBlendFuncSeparate.class, supported_extensions, "GL_EXT_blend_func_separate");
		GLContext.initNativeStubs(EXTCompiledVertexArray.class, supported_extensions, "GL_EXT_compiled_vertex_array");
		GLContext.initNativeStubs(EXTDepthBoundsTest.class, supported_extensions, "GL_EXT_depth_bounds_test");
		GLContext.initNativeStubs(EXTDrawRangeElements.class, supported_extensions, "GL_EXT_draw_range_elements");
		GLContext.initNativeStubs(EXTFogCoord.class, supported_extensions, "GL_EXT_fog_coord");
		GLContext.initNativeStubs(EXTFramebufferObject.class, supported_extensions, "GL_EXT_framebuffer_object");
		GLContext.initNativeStubs(EXTMultiDrawArrays.class, supported_extensions, "GL_EXT_multi_draw_arrays");
		GLContext.initNativeStubs(EXTPalettedTexture.class, supported_extensions, "GL_EXT_paletted_texture");
		GLContext.initNativeStubs(EXTPointParameters.class, supported_extensions, "GL_EXT_point_parameters");
		GLContext.initNativeStubs(EXTSecondaryColor.class, supported_extensions, "GL_EXT_secondary_color");
		GLContext.initNativeStubs(EXTStencilTwoSide.class, supported_extensions, "GL_EXT_stencil_two_side");
		GLContext.initNativeStubs(EXTVertexShader.class, supported_extensions, "GL_EXT_vertex_shader");
		GLContext.initNativeStubs(EXTVertexWeighting.class, supported_extensions, "GL_EXT_vertex_weighting");
		GLContext.initNativeStubs(GL12.class, supported_extensions, "OpenGL12");
		GLContext.initNativeStubs(GL13.class, supported_extensions, "OpenGL13");
		GLContext.initNativeStubs(GL14.class, supported_extensions, "OpenGL14");
		GLContext.initNativeStubs(GL15.class, supported_extensions, "OpenGL15");
		GLContext.initNativeStubs(GL20.class, supported_extensions, "OpenGL20");
		GLContext.initNativeStubs(NVEvaluators.class, supported_extensions, "GL_NV_evaluators");
		GLContext.initNativeStubs(NVFence.class, supported_extensions, "GL_NV_fence");
		GLContext.initNativeStubs(NVFragmentProgram.class, supported_extensions, "GL_NV_fragment_program");
		GLContext.initNativeStubs(NVHalfFloat.class, supported_extensions, "GL_NV_half_float");
		GLContext.initNativeStubs(NVOcclusionQuery.class, supported_extensions, "GL_NV_occlusion_query");
		GLContext.initNativeStubs(NVPixelDataRange.class, supported_extensions, "GL_NV_pixel_data_range");
		GLContext.initNativeStubs(NVPointSprite.class, supported_extensions, "GL_NV_point_sprite");
		GLContext.initNativeStubs(NVPrimitiveRestart.class, supported_extensions, "GL_NV_primitive_restart");
		GLContext.initNativeStubs(NVProgram.class, supported_extensions, "GL_NV_program");
		GLContext.initNativeStubs(NVRegisterCombiners.class, supported_extensions, "GL_NV_register_combiners");
		GLContext.initNativeStubs(NVRegisterCombiners2.class, supported_extensions, "GL_NV_register_combiners2");
		GLContext.initNativeStubs(NVVertexArrayRange.class, supported_extensions, "GL_NV_vertex_array_range");
		GLContext.initNativeStubs(NVVertexProgram.class, supported_extensions, "GL_NV_vertex_program");
		return supported_extensions;
	}

	static void unloadAllStubs() {
		GLContext.resetNativeStubs(ARBBufferObject.class);
		GLContext.resetNativeStubs(ARBColorBufferFloat.class);
		GLContext.resetNativeStubs(ARBDrawBuffers.class);
		GLContext.resetNativeStubs(ARBImaging.class);
		GLContext.resetNativeStubs(ARBMatrixPalette.class);
		GLContext.resetNativeStubs(ARBMultisample.class);
		GLContext.resetNativeStubs(ARBMultitexture.class);
		GLContext.resetNativeStubs(ARBOcclusionQuery.class);
		GLContext.resetNativeStubs(ARBPointParameters.class);
		GLContext.resetNativeStubs(ARBProgram.class);
		GLContext.resetNativeStubs(ARBShaderObjects.class);
		GLContext.resetNativeStubs(ARBTextureCompression.class);
		GLContext.resetNativeStubs(ARBTransposeMatrix.class);
		GLContext.resetNativeStubs(ARBVertexBlend.class);
		GLContext.resetNativeStubs(ARBVertexProgram.class);
		GLContext.resetNativeStubs(ARBVertexShader.class);
		GLContext.resetNativeStubs(ARBWindowPos.class);
		GLContext.resetNativeStubs(ATIDrawBuffers.class);
		GLContext.resetNativeStubs(ATIElementArray.class);
		GLContext.resetNativeStubs(ATIEnvmapBumpmap.class);
		GLContext.resetNativeStubs(ATIFragmentShader.class);
		GLContext.resetNativeStubs(ATIMapObjectBuffer.class);
		GLContext.resetNativeStubs(ATIPnTriangles.class);
		GLContext.resetNativeStubs(ATISeparateStencil.class);
		GLContext.resetNativeStubs(ATIVertexArrayObject.class);
		GLContext.resetNativeStubs(ATIVertexAttribArrayObject.class);
		GLContext.resetNativeStubs(ATIVertexStreams.class);
		GLContext.resetNativeStubs(EXTBlendEquationSeparate.class);
		GLContext.resetNativeStubs(EXTBlendFuncSeparate.class);
		GLContext.resetNativeStubs(EXTCompiledVertexArray.class);
		GLContext.resetNativeStubs(EXTDepthBoundsTest.class);
		GLContext.resetNativeStubs(EXTDrawRangeElements.class);
		GLContext.resetNativeStubs(EXTFogCoord.class);
		GLContext.resetNativeStubs(EXTFramebufferObject.class);
		GLContext.resetNativeStubs(EXTMultiDrawArrays.class);
		GLContext.resetNativeStubs(EXTPalettedTexture.class);
		GLContext.resetNativeStubs(EXTPointParameters.class);
		GLContext.resetNativeStubs(EXTSecondaryColor.class);
		GLContext.resetNativeStubs(EXTStencilTwoSide.class);
		GLContext.resetNativeStubs(EXTVertexShader.class);
		GLContext.resetNativeStubs(EXTVertexWeighting.class);
		GLContext.resetNativeStubs(GL11.class);
		GLContext.resetNativeStubs(GL12.class);
		GLContext.resetNativeStubs(GL13.class);
		GLContext.resetNativeStubs(GL14.class);
		GLContext.resetNativeStubs(GL15.class);
		GLContext.resetNativeStubs(GL20.class);
		GLContext.resetNativeStubs(NVEvaluators.class);
		GLContext.resetNativeStubs(NVFence.class);
		GLContext.resetNativeStubs(NVFragmentProgram.class);
		GLContext.resetNativeStubs(NVHalfFloat.class);
		GLContext.resetNativeStubs(NVOcclusionQuery.class);
		GLContext.resetNativeStubs(NVPixelDataRange.class);
		GLContext.resetNativeStubs(NVPointSprite.class);
		GLContext.resetNativeStubs(NVPrimitiveRestart.class);
		GLContext.resetNativeStubs(NVProgram.class);
		GLContext.resetNativeStubs(NVRegisterCombiners.class);
		GLContext.resetNativeStubs(NVRegisterCombiners2.class);
		GLContext.resetNativeStubs(NVVertexArrayRange.class);
		GLContext.resetNativeStubs(NVVertexProgram.class);
	}

	ContextCapabilities(Set supported_extensions) {
		this.GL_ARB_color_buffer_float = supported_extensions.contains("GL_ARB_color_buffer_float");
		this.GL_ARB_depth_texture = supported_extensions.contains("GL_ARB_depth_texture");
		this.GL_ARB_draw_buffers = supported_extensions.contains("GL_ARB_draw_buffers");
		this.GL_ARB_fragment_program = supported_extensions.contains("GL_ARB_fragment_program")
			&& supported_extensions.contains("GL_ARB_program");
		this.GL_ARB_fragment_program_shadow = supported_extensions.contains("GL_ARB_fragment_program_shadow");
		this.GL_ARB_fragment_shader = supported_extensions.contains("GL_ARB_fragment_shader");
		this.GL_ARB_half_float_pixel = supported_extensions.contains("GL_ARB_half_float_pixel");
		this.GL_ARB_imaging = supported_extensions.contains("GL_ARB_imaging");
		this.GL_ARB_matrix_palette = supported_extensions.contains("GL_ARB_matrix_palette");
		this.GL_ARB_multisample = supported_extensions.contains("GL_ARB_multisample");
		this.GL_ARB_multitexture = supported_extensions.contains("GL_ARB_multitexture");
		this.GL_ARB_occlusion_query = supported_extensions.contains("GL_ARB_occlusion_query");
		this.GL_ARB_pixel_buffer_object = supported_extensions.contains("GL_ARB_pixel_buffer_object")
			&& supported_extensions.contains("GL_ARB_buffer_object");
		this.GL_ARB_point_parameters = supported_extensions.contains("GL_ARB_point_parameters");
		this.GL_ARB_point_sprite = supported_extensions.contains("GL_ARB_point_sprite");
		this.GL_ARB_shader_objects = supported_extensions.contains("GL_ARB_shader_objects");
		this.GL_ARB_shading_language_100 = supported_extensions.contains("GL_ARB_shading_language_100");
		this.GL_ARB_shadow = supported_extensions.contains("GL_ARB_shadow");
		this.GL_ARB_shadow_ambient = supported_extensions.contains("GL_ARB_shadow_ambient");
		this.GL_ARB_texture_border_clamp = supported_extensions.contains("GL_ARB_texture_border_clamp");
		this.GL_ARB_texture_compression = supported_extensions.contains("GL_ARB_texture_compression");
		this.GL_ARB_texture_cube_map = supported_extensions.contains("GL_ARB_texture_cube_map");
		this.GL_ARB_texture_env_add = supported_extensions.contains("GL_ARB_texture_env_add");
		this.GL_ARB_texture_env_combine = supported_extensions.contains("GL_ARB_texture_env_combine");
		this.GL_ARB_texture_env_crossbar = supported_extensions.contains("GL_ARB_texture_env_crossbar");
		this.GL_ARB_texture_env_dot3 = supported_extensions.contains("GL_ARB_texture_env_dot3");
		this.GL_ARB_texture_float = supported_extensions.contains("GL_ARB_texture_float");
		this.GL_ARB_texture_mirrored_repeat = supported_extensions.contains("GL_ARB_texture_mirrored_repeat");
		this.GL_ARB_texture_non_power_of_two = supported_extensions.contains("GL_ARB_texture_non_power_of_two");
		this.GL_ARB_texture_rectangle = supported_extensions.contains("GL_ARB_texture_rectangle");
		this.GL_ARB_transpose_matrix = supported_extensions.contains("GL_ARB_transpose_matrix");
		this.GL_ARB_vertex_blend = supported_extensions.contains("GL_ARB_vertex_blend");
		this.GL_ARB_vertex_buffer_object = supported_extensions.contains("GL_ARB_vertex_buffer_object")
			&& supported_extensions.contains("GL_ARB_buffer_object");
		this.GL_ARB_vertex_program = supported_extensions.contains("GL_ARB_vertex_program")
			&& supported_extensions.contains("GL_ARB_program");
		this.GL_ARB_vertex_shader = supported_extensions.contains("GL_ARB_vertex_shader");
		this.GL_ARB_window_pos = supported_extensions.contains("GL_ARB_window_pos");
		this.GL_ATI_draw_buffers = supported_extensions.contains("GL_ATI_draw_buffers");
		this.GL_ATI_element_array = supported_extensions.contains("GL_ATI_element_array");
		this.GL_ATI_envmap_bumpmap = supported_extensions.contains("GL_ATI_envmap_bumpmap");
		this.GL_ATI_fragment_shader = supported_extensions.contains("GL_ATI_fragment_shader");
		this.GL_ATI_map_object_buffer = supported_extensions.contains("GL_ATI_map_object_buffer");
		this.GL_ATI_pn_triangles = supported_extensions.contains("GL_ATI_pn_triangles");
		this.GL_ATI_separate_stencil = supported_extensions.contains("GL_ATI_separate_stencil");
		this.GL_ATI_texture_compression_3dc = supported_extensions.contains("GL_ATI_texture_compression_3dc");
		this.GL_ATI_texture_float = supported_extensions.contains("GL_ATI_texture_float");
		this.GL_ATI_texture_mirror_once = supported_extensions.contains("GL_ATI_texture_mirror_once");
		this.GL_ATI_vertex_array_object = supported_extensions.contains("GL_ATI_vertex_array_object");
		this.GL_ATI_vertex_attrib_array_object = supported_extensions.contains("GL_ATI_vertex_attrib_array_object");
		this.GL_ATI_vertex_streams = supported_extensions.contains("GL_ATI_vertex_streams");
		this.GL_EXT_abgr = supported_extensions.contains("GL_EXT_abgr");
		this.GL_EXT_bgra = supported_extensions.contains("GL_EXT_bgra");
		this.GL_EXT_blend_equation_separate = supported_extensions.contains("GL_EXT_blend_equation_separate");
		this.GL_EXT_blend_func_separate = supported_extensions.contains("GL_EXT_blend_func_separate");
		this.GL_EXT_blend_subtract = supported_extensions.contains("GL_EXT_blend_subtract");
		this.GL_EXT_cg_shader = supported_extensions.contains("GL_EXT_cg_shader");
		this.GL_EXT_compiled_vertex_array = supported_extensions.contains("GL_EXT_compiled_vertex_array");
		this.GL_EXT_depth_bounds_test = supported_extensions.contains("GL_EXT_depth_bounds_test");
		this.GL_EXT_draw_range_elements = supported_extensions.contains("GL_EXT_draw_range_elements");
		this.GL_EXT_fog_coord = supported_extensions.contains("GL_EXT_fog_coord");
		this.GL_EXT_framebuffer_object = supported_extensions.contains("GL_EXT_framebuffer_object");
		this.GL_EXT_multi_draw_arrays = supported_extensions.contains("GL_EXT_multi_draw_arrays");
		this.GL_EXT_packed_pixels = supported_extensions.contains("GL_EXT_packed_pixels");
		this.GL_EXT_paletted_texture = supported_extensions.contains("GL_EXT_paletted_texture");
		this.GL_EXT_pixel_buffer_object = supported_extensions.contains("GL_EXT_pixel_buffer_object")
			&& supported_extensions.contains("GL_ARB_buffer_object");
		this.GL_EXT_point_parameters = supported_extensions.contains("GL_EXT_point_parameters");
		this.GL_EXT_rescale_normal = supported_extensions.contains("GL_EXT_rescale_normal");
		this.GL_EXT_secondary_color = supported_extensions.contains("GL_EXT_secondary_color");
		this.GL_EXT_separate_specular_color = supported_extensions.contains("GL_EXT_separate_specular_color");
		this.GL_EXT_shadow_funcs = supported_extensions.contains("GL_EXT_shadow_funcs");
		this.GL_EXT_shared_texture_palette = supported_extensions.contains("GL_EXT_shared_texture_palette");
		this.GL_EXT_stencil_two_side = supported_extensions.contains("GL_EXT_stencil_two_side");
		this.GL_EXT_stencil_wrap = supported_extensions.contains("GL_EXT_stencil_wrap");
		this.GL_EXT_texture_3d = supported_extensions.contains("GL_EXT_texture_3d");
		this.GL_EXT_texture_compression_s3tc = supported_extensions.contains("GL_EXT_texture_compression_s3tc");
		this.GL_EXT_texture_env_combine = supported_extensions.contains("GL_EXT_texture_env_combine");
		this.GL_EXT_texture_env_dot3 = supported_extensions.contains("GL_EXT_texture_env_dot3");
		this.GL_EXT_texture_filter_anisotropic = supported_extensions.contains("GL_EXT_texture_filter_anisotropic");
		this.GL_EXT_texture_lod_bias = supported_extensions.contains("GL_EXT_texture_lod_bias");
		this.GL_EXT_texture_mirror_clamp = supported_extensions.contains("GL_EXT_texture_mirror_clamp");
		this.GL_EXT_texture_rectangle = supported_extensions.contains("GL_EXT_texture_rectangle");
		this.GL_EXT_vertex_shader = supported_extensions.contains("GL_EXT_vertex_shader");
		this.GL_EXT_vertex_weighting = supported_extensions.contains("GL_EXT_vertex_weighting");
		this.OpenGL11 = supported_extensions.contains("OpenGL11");
		this.OpenGL12 = supported_extensions.contains("OpenGL12");
		this.OpenGL13 = supported_extensions.contains("OpenGL13");
		this.OpenGL14 = supported_extensions.contains("OpenGL14");
		this.OpenGL15 = supported_extensions.contains("OpenGL15");
		this.OpenGL20 = supported_extensions.contains("OpenGL20");
		this.GL_HP_occlusion_test = supported_extensions.contains("GL_HP_occlusion_test");
		this.GL_IBM_rasterpos_clip = supported_extensions.contains("GL_IBM_rasterpos_clip");
		this.GL_NV_blend_square = supported_extensions.contains("GL_NV_blend_square");
		this.GL_NV_copy_depth_to_color = supported_extensions.contains("GL_NV_copy_depth_to_color");
		this.GL_NV_depth_clamp = supported_extensions.contains("GL_NV_depth_clamp");
		this.GL_NV_evaluators = supported_extensions.contains("GL_NV_evaluators");
		this.GL_NV_fence = supported_extensions.contains("GL_NV_fence");
		this.GL_NV_float_buffer = supported_extensions.contains("GL_NV_float_buffer");
		this.GL_NV_fog_distance = supported_extensions.contains("GL_NV_fog_distance");
		this.GL_NV_fragment_program = supported_extensions.contains("GL_NV_fragment_program")
			&& supported_extensions.contains("GL_NV_program");
		this.GL_NV_fragment_program2 = supported_extensions.contains("GL_NV_fragment_program2");
		this.GL_NV_fragment_program_option = supported_extensions.contains("GL_NV_fragment_program_option");
		this.GL_NV_half_float = supported_extensions.contains("GL_NV_half_float");
		this.GL_NV_light_max_exponent = supported_extensions.contains("GL_NV_light_max_exponent");
		this.GL_NV_multisample_filter_hint = supported_extensions.contains("GL_NV_multisample_filter_hint");
		this.GL_NV_occlusion_query = supported_extensions.contains("GL_NV_occlusion_query");
		this.GL_NV_packed_depth_stencil = supported_extensions.contains("GL_NV_packed_depth_stencil");
		this.GL_NV_pixel_data_range = supported_extensions.contains("GL_NV_pixel_data_range");
		this.GL_NV_point_sprite = supported_extensions.contains("GL_NV_point_sprite");
		this.GL_NV_primitive_restart = supported_extensions.contains("GL_NV_primitive_restart");
		this.GL_NV_register_combiners = supported_extensions.contains("GL_NV_register_combiners");
		this.GL_NV_register_combiners2 = supported_extensions.contains("GL_NV_register_combiners2");
		this.GL_NV_texgen_reflection = supported_extensions.contains("GL_NV_texgen_reflection");
		this.GL_NV_texture_compression_vtc = supported_extensions.contains("GL_NV_texture_compression_vtc");
		this.GL_NV_texture_env_combine4 = supported_extensions.contains("GL_NV_texture_env_combine4");
		this.GL_NV_texture_expand_normal = supported_extensions.contains("GL_NV_texture_expand_normal");
		this.GL_NV_texture_rectangle = supported_extensions.contains("GL_NV_texture_rectangle");
		this.GL_NV_texture_shader = supported_extensions.contains("GL_NV_texture_shader");
		this.GL_NV_texture_shader2 = supported_extensions.contains("GL_NV_texture_shader2");
		this.GL_NV_texture_shader3 = supported_extensions.contains("GL_NV_texture_shader3");
		this.GL_NV_vertex_array_range = supported_extensions.contains("GL_NV_vertex_array_range");
		this.GL_NV_vertex_array_range2 = supported_extensions.contains("GL_NV_vertex_array_range2");
		this.GL_NV_vertex_program = supported_extensions.contains("GL_NV_vertex_program")
			&& supported_extensions.contains("GL_NV_program");
		this.GL_NV_vertex_program1_1 = supported_extensions.contains("GL_NV_vertex_program1_1");
		this.GL_NV_vertex_program2 = supported_extensions.contains("GL_NV_vertex_program2");
		this.GL_NV_vertex_program2_option = supported_extensions.contains("GL_NV_vertex_program2_option");
		this.GL_NV_vertex_program3 = supported_extensions.contains("GL_NV_vertex_program3");
		this.GL_SUN_slice_accum = supported_extensions.contains("GL_SUN_slice_accum");
	}
}
